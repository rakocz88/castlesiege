package com.pilaf.cs.users.security;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.LocalServerPort;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
import org.springframework.security.oauth2.client.token.AccessTokenRequest;
import org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;
import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;
import org.springframework.test.context.junit4.SpringRunner;

import com.pilaf.cs.users.service.UserService;

@RunWith(SpringRunner.class)
@SpringBootTest
@PropertySource("classpath:test.yml")
//@ContextConfiguration(classes = UserRestController.class)
//@WebMvcTest(controllers = UserRestController.class, secure = true)
public class OAuth2TokenTest {

	@MockBean
	private UserService userService;
	
	@LocalServerPort
	private int port;

//	@Autowired
//	private MockMvc mvc;
	
	

	@Before
	public void before() {
		System.out.println("Before");
	}

//	@Test
//	public void tokenLoginTest() throws Exception {
//		when(userService.getAllUsers()).thenReturn(new ArrayList<>());
//		mvc.perform(get("/all")).andExpect(status().isOk());
//		System.out.println("Hello");
//	}
	
	protected OAuth2ProtectedResourceDetails resource() {

		ResourceOwnerPasswordResourceDetails resource = new ResourceOwnerPasswordResourceDetails();

		List<String> scopes = new ArrayList<String>(2);
		scopes.add("write");
		scopes.add("read");
		resource.setAccessTokenUri("localhost:8080/users/oauth/token");
		resource.setClientId("cs");
		resource.setClientSecret("secret");
		resource.setGrantType("password");
		resource.setScope(scopes);

		resource.setUsername("filip");
		resource.setPassword("filip");

		return resource;
	}

	@Test
	public void testOauth2() {
		AccessTokenRequest atr = new DefaultAccessTokenRequest();
		OAuth2RestOperations restTemplate = new OAuth2RestTemplate(resource(), new DefaultOAuth2ClientContext(atr));
		restTemplate.getAccessToken();
	}

	

}
