package com.pilaf.cs.users.security;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.PropertySource;
import org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;
import org.springframework.security.oauth2.client.token.AccessTokenRequest;
import org.springframework.security.oauth2.client.token.DefaultAccessTokenRequest;
import org.springframework.security.oauth2.client.token.grant.password.ResourceOwnerPasswordResourceDetails;
import org.springframework.security.oauth2.common.util.JacksonJsonParser;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.util.Base64Utils;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.pilaf.cs.users.service.UserService;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@PropertySource("classpath:test.yml")
// @ContextConfiguration(classes = UserRestController.class)
@WebMvcTest
public class OAuth2TokenTest {

	@MockBean
	private UserService userService;

	@Value("${local.server.port}")
	private int port;

	// @Value("${mielizna}")
	// private int local;

	@Autowired
	private MockMvc mockMvc;

	@Before
	public void before() {
		System.out.println("Before");
	}

	// @Test
	// public void tokenLoginTest() throws Exception {
	// when(userService.getAllUsers()).thenReturn(new ArrayList<>());
	// mvc.perform(get("/all")).andExpect(status().isOk());
	// System.out.println("Hello");
	// }

	protected OAuth2ProtectedResourceDetails resource() {

		ResourceOwnerPasswordResourceDetails resource = new ResourceOwnerPasswordResourceDetails();

		List<String> scopes = new ArrayList<String>(2);
		scopes.add("write");
		scopes.add("read");
		resource.setAccessTokenUri("http://localhost:" + port + "/users/oauth/token");
		resource.setClientId("cs");
		resource.setClientSecret("secret");
		resource.setGrantType("password");
		resource.setScope(scopes);

		resource.setUsername("filip");
		resource.setPassword("filip");

		return resource;
	}

	@Test
	public void testOauth2() {
		AccessTokenRequest atr = new DefaultAccessTokenRequest();
		OAuth2RestOperations restTemplate = new OAuth2RestTemplate(resource(), new DefaultOAuth2ClientContext(atr));
		restTemplate.getAccessToken();
	}

	private String obtainAccessToken(String username, String password) throws Exception {
		
		String authorization = "Basic "
				+ new String(Base64Utils.encode("filip:filip".getBytes()));

		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("grant_type", "password");
		params.add("client_id", "fooClientIdPassword");
		params.add("username", username);
		params.add("password", password);

		ResultActions result = mockMvc
				.perform(post("/oauth/token").params(params).with(httpBasic("fooClientIdPassword", "secret"))
						.accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk()).andExpect(content().contentType("application/json;charset=UTF-8"));

		String resultString = result.andReturn().getResponse().getContentAsString();

		JacksonJsonParser jsonParser = new JacksonJsonParser();
		return jsonParser.parseMap(resultString).get("access_token").toString();

	}
}
