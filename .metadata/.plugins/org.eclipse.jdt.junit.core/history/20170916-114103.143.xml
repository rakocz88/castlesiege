<?xml version="1.0" encoding="UTF-8"?><testrun name="RunBDDTest" project="CsE2ETests" tests="6" started="0" failures="0" errors="1" ignored="0">
  <testsuite name="com.pilaf.cs.tests.RunBDDTest">
    <testsuite name="Feature: User module feature Feature" incomplete="true">
      <error>java.lang.IllegalStateException: Failed to load ApplicationContext&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:124)&#13;
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)&#13;
	at cucumber.runtime.java.spring.CucumberTestContextManager.getContext(SpringFactory.java:215)&#13;
	at cucumber.runtime.java.spring.CucumberTestContextManager.&lt;init&gt;(SpringFactory.java:207)&#13;
	at cucumber.runtime.java.spring.SpringFactory.start(SpringFactory.java:102)&#13;
	at cucumber.runtime.java.JavaBackend.buildWorld(JavaBackend.java:123)&#13;
	at cucumber.runtime.Runtime.buildBackendWorlds(Runtime.java:140)&#13;
	at cucumber.runtime.model.CucumberScenario.run(CucumberScenario.java:38)&#13;
	at cucumber.runtime.junit.ExecutionUnitRunner.run(ExecutionUnitRunner.java:91)&#13;
	at cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:63)&#13;
	at cucumber.runtime.junit.FeatureRunner.runChild(FeatureRunner.java:18)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at cucumber.runtime.junit.FeatureRunner.run(FeatureRunner.java:70)&#13;
	at cucumber.api.junit.Cucumber.runChild(Cucumber.java:93)&#13;
	at cucumber.api.junit.Cucumber.runChild(Cucumber.java:37)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at cucumber.api.junit.Cucumber.run(Cucumber.java:98)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'oauthLogInClient': Unsatisfied dependency expressed through field 'restTemplate'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.web.client.RestTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588)&#13;
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)&#13;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)&#13;
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)&#13;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)&#13;
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693)&#13;
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360)&#13;
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)&#13;
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120)&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)&#13;
	... 32 more&#13;
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.web.client.RestTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1493)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1104)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1066)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:585)&#13;
	... 50 more&#13;
&#13;
</error>
      <testsuite name="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true">
        <testcase name="Given I am a user that is not loged in" classname="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true"/>
        <testcase name="And there is a account with username =&quot;filip&quot; and password = &quot;filip&quot; in the database" classname="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true"/>
        <testcase name="And it is set as enabled" classname="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true"/>
        <testcase name="When I try to get a token using the oauth login endpoint and using username = &quot;filip&quot; and password &quot;filip&quot; for the application = &quot;cs&quot; with secret = &quot;secret&quot;" classname="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true"/>
        <testcase name="Then I should get a response code 200" classname="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true"/>
        <testcase name="And the oauth token should not be empty" classname="Scenario: I want to log in as a valid user and get a response code 200 from the login action" incomplete="true"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testrun>
